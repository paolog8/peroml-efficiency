.
├── .DS_Store
├── .env
├── .git
│   ├── COMMIT_EDITMSG
│   ├── FETCH_HEAD
│   ├── HEAD
│   ├── ORIG_HEAD
│   ├── config
│   ├── description
│   ├── hooks
│   │   ├── applypatch-msg.sample
│   │   ├── commit-msg.sample
│   │   ├── fsmonitor-watchman.sample
│   │   ├── post-update.sample
│   │   ├── pre-applypatch.sample
│   │   ├── pre-commit.sample
│   │   ├── pre-merge-commit.sample
│   │   ├── pre-push.sample
│   │   ├── pre-rebase.sample
│   │   ├── pre-receive.sample
│   │   ├── prepare-commit-msg.sample
│   │   ├── push-to-checkout.sample
│   │   └── update.sample
│   ├── index
│   ├── info
│   │   └── exclude
│   ├── logs
│   │   ├── HEAD
│   │   └── refs
│   │       ├── heads
│   │       │   └── main
│   │       └── remotes
│   │           └── origin
│   │               └── main
│   ├── objects
│   │   ├── 18
│   │   │   └── b12054cc5b27d7d246acb79d069e54bda45bc6
│   │   ├── 1c
│   │   │   └── 3a9db572f4d202287551e9744a5ec3fb2aa379
│   │   ├── 1f
│   │   │   └── 0a1718ada599394d06eb4ce0f0c15e140f06a4
│   │   ├── 2d
│   │   │   └── 162f36724fe7e2f1d1e8cedbe8af567dcdd21d
│   │   ├── 32
│   │   │   └── 6e13da6c89966863fd19981156aa8452504b0f
│   │   ├── 36
│   │   │   └── 7025588fa14681bc4756270ad10b05f373b85d
│   │   ├── 4f
│   │   │   └── e842abe197a6cd22256db2eaeb0f8aff5843f9
│   │   ├── 58
│   │   │   └── 58dbf1e3cd36a6edb745580d8ceba9dbb32328
│   │   ├── 5c
│   │   │   └── 42d268e49eea2594865574020ea846a2341df7
│   │   ├── 8e
│   │   │   └── 1bce21b4452f12884ece241591d4901f08cb22
│   │   ├── 96
│   │   │   └── b377a23fe907de1ac11a553b5648155d491285
│   │   ├── a0
│   │   │   └── 1bef4831887c7167b2475fe438c25207dd0a9f
│   │   ├── a1
│   │   │   └── 45606e1f588aa16000160dca0dfcb05bb878b7
│   │   ├── a7
│   │   │   └── 23a3e76314f98e9061e06c4cac3f28bc162ce3
│   │   ├── b2
│   │   │   ├── 644b1874eaf5cc819c0cfb879346b2f651381c
│   │   │   └── d160ecf7ec683184f106d76e02127799383dc4
│   │   ├── b4
│   │   │   ├── 3c63613c88abf3eabeaa86c3f62c3432fba01b
│   │   │   └── f71c3a293b7c30dbb94afd6f3e58997b55ceef
│   │   ├── c3
│   │   │   └── 2fbd859bf4cc4f5e2e65690c00889b54683af7
│   │   ├── d0
│   │   │   └── ac4a7252c9cf9c057ca5b9659acba6b4bffa6f
│   │   ├── d4
│   │   │   └── f7d11c284ddfa9486b93a090035aaa37fca265
│   │   ├── d5
│   │   │   └── 64d0bc3dd917926892c55e3706cc116d5b165e
│   │   ├── d6
│   │   │   └── a4eb28d86d34948aad64ce1c5817ce95b33211
│   │   ├── d7
│   │   │   └── c9832ff3c60eeb0b764a3b8d40fa4dad2cfee5
│   │   ├── e6
│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391
│   │   ├── f6
│   │   │   └── cbcb3750ce55470a5121a0d34e841df29ff719
│   │   ├── info
│   │   └── pack
│   └── refs
│       ├── heads
│       │   └── main
│       ├── remotes
│       │   └── origin
│       │       └── main
│       └── tags
├── .gitignore
├── LICENSE
├── Makefile
├── README.md
├── data
│   ├── .DS_Store
│   ├── external
│   │   ├── .DS_Store
│   │   ├── .gitkeep
│   │   └── relevant_features.csv
│   ├── interim
│   │   └── .gitkeep
│   ├── processed
│   │   └── .gitkeep
│   └── raw
│       ├── .gitkeep
│       └── Perovskite_database_all_data.csv
├── docker
│   └── Dockerfile
├── docker-compose.yml
├── docs
│   ├── Makefile
│   ├── commands.rst
│   ├── conf.py
│   ├── getting-started.rst
│   ├── index.rst
│   └── make.bat
├── models
│   └── .gitkeep
├── notebooks
│   ├── .gitkeep
│   ├── .ipynb_checkpoints
│   │   └── ChatGPTaided_exploration-checkpoint.ipynb
│   └── ChatGPTaided_exploration.ipynb
├── project_contents.txt
├── references
│   └── .gitkeep
├── reports
│   ├── .gitkeep
│   ├── .ipynb_checkpoints
│   │   ├── 2023-05-03_15-15-12_report-checkpoint.html
│   │   └── config-checkpoint.txt
│   ├── 2023-05-03_15-15-12_report.html
│   ├── config.txt
│   └── figures
│       └── .gitkeep
├── requirements.txt
├── setup.py
├── src
│   ├── __init__.py
│   ├── data
│   │   ├── .gitkeep
│   │   ├── __init__.py
│   │   └── make_dataset.py
│   ├── features
│   │   ├── .gitkeep
│   │   ├── __init__.py
│   │   └── build_features.py
│   ├── models
│   │   ├── .gitkeep
│   │   ├── __init__.py
│   │   ├── predict_model.py
│   │   └── train_model.py
│   └── visualization
│       ├── .gitkeep
│       ├── __init__.py
│       └── visualize.py
├── test_environment.py
└── tox.ini

59 directories, 104 files
-e 

>>>> ./docs/conf.py <<<<


# -*- coding: utf-8 -*-
#
# PeroML-Efficiency documentation build configuration file, created by
# sphinx-quickstart.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import os
import sys

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
# sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'PeroML-Efficiency'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1'
# The full version, including alpha/beta/rc tags.
release = '0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
# language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
# default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
# html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
# html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
# html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
# html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
# html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
# html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}

# If false, no module index is generated.
# html_domain_indices = True

# If false, no index is generated.
# html_use_index = True

# If true, the index is split into individual pages for each letter.
# html_split_index = False

# If true, links to the reST sources are added to the pages.
# html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
# html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
# html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'peroml-efficiencydoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    # 'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
    ('index',
     'peroml-efficiency.tex',
     u'PeroML-Efficiency Documentation',
     u"Paolo Graniero", 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
# latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
# latex_use_parts = False

# If true, show page references after internal links.
# latex_show_pagerefs = False

# If true, show URL addresses after external links.
# latex_show_urls = False

# Documents to append as an appendix to all manuals.
# latex_appendices = []

# If false, no module index is generated.
# latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'peroml-efficiency', u'PeroML-Efficiency Documentation',
     [u"Paolo Graniero"], 1)
]

# If true, show URL addresses after external links.
# man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    ('index', 'peroml-efficiency', u'PeroML-Efficiency Documentation',
     u"Paolo Graniero", 'PeroML-Efficiency',
     'A short description of the project.', 'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
# texinfo_appendices = []

# If false, no module index is generated.
# texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
# texinfo_show_urls = 'footnote'
-e 

>>>> ./setup.py <<<<


from setuptools import find_packages, setup

setup(
    name='src',
    packages=find_packages(),
    version='0.1.0',
    description='A short description of the project.',
    author='Paolo Graniero',
    license='MIT',
)
-e 

>>>> ./test_environment.py <<<<


import sys

REQUIRED_PYTHON = "python3"


def main():
    system_major = sys.version_info.major
    if REQUIRED_PYTHON == "python":
        required_major = 2
    elif REQUIRED_PYTHON == "python3":
        required_major = 3
    else:
        raise ValueError("Unrecognized python interpreter: {}".format(
            REQUIRED_PYTHON))

    if system_major != required_major:
        raise TypeError(
            "This project requires Python {}. Found: Python {}".format(
                required_major, sys.version))
    else:
        print(">>> Development environment passes all tests!")


if __name__ == '__main__':
    main()
-e 

>>>> ./src/visualization/__init__.py <<<<


-e 

>>>> ./src/visualization/visualize.py <<<<


-e 

>>>> ./src/features/build_features.py <<<<


-e 

>>>> ./src/features/__init__.py <<<<


-e 

>>>> ./src/__init__.py <<<<


-e 

>>>> ./src/models/train_model.py <<<<


-e 

>>>> ./src/models/__init__.py <<<<


-e 

>>>> ./src/models/predict_model.py <<<<


-e 

>>>> ./src/data/__init__.py <<<<


-e 

>>>> ./src/data/make_dataset.py <<<<


# -*- coding: utf-8 -*-
import click
import logging
from pathlib import Path
from dotenv import find_dotenv, load_dotenv


@click.command()
@click.argument('input_filepath', type=click.Path(exists=True))
@click.argument('output_filepath', type=click.Path())
def main(input_filepath, output_filepath):
    """ Runs data processing scripts to turn raw data from (../raw) into
        cleaned data ready to be analyzed (saved in ../processed).
    """
    logger = logging.getLogger(__name__)
    logger.info('making final data set from raw data')


if __name__ == '__main__':
    log_fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(level=logging.INFO, format=log_fmt)

    # not used in this stub but often useful for finding various files
    project_dir = Path(__file__).resolve().parents[2]

    # find .env automagically by walking up directories until it's found, then
    # load up the .env entries as environment variables
    load_dotenv(find_dotenv())

    main()
